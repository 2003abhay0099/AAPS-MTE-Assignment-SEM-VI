17. Calculate how much water can be trapped between the bars of a histogram. Write its algorithm, program. Find its time and space complexities. Explain with suitable example


ALGORITHM:

1. Initialize left = 0, right = n - 1, left_max = 0, right_max = 0, and water = 0.



2. While left <= right:

I
     - If height[left] <= height[right]:
	- 

If height[left] >= left_max, update left_max.

		- Else, add left_max - height[left] to water.


	- Move left pointer to the right.

     - 

Else:
	-

If height[right] >= right_max, update right_max.
	- 

Else, add right_max - height[right] to water.

	- Move right pointer to the left.



3. Return the accumulated water.





PROGRAM:

public class TrappingRainWater {
    public static int trap(int[] height) {
        if(height == null || height.length == 0) {
            return 0;
        }
        
        int left = 0, right = height.length - 1;
        int left_max = 0, right_max = 0;
        int water = 0;
        
        while(left <= right) {
            if(height[left] <= height[right]) {
                if(height[left] >= left_max) {
                    left_max = height[left];
                } else {
                    water += left_max - height[left];
                }
                left++;
            } else {
                if(height[right] >= right_max) {
                    right_max = height[right];
                } else {
                    water += right_max - height[right];
                }
                right--;
            }
        }
        
        return water;
    }

    public static void main(String[] args) {
        int[] height = {0,1,0,2,1,0,1,3,2,1,2,1};
        System.out.println(trap(height));  
    }
}


Time Complexity:
O(n)
Space Complexity:
O(1)