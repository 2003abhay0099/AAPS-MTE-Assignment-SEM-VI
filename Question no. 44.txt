44. How to find two numbers in an array that add up to a target using hashing. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. Initialize an empty HashMap.

2. 

Traverse the array:


        - For each element, calculate target - currentElement.

    
        - If that difference exists in the map, we found the pair.


        - Otherwise, add the current element to the map.



3. Return the indices (or values) when found.



PROGRAM:

import java.util.*;

public class TwoSumHashing {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{map.get(complement), i};
            } else {
                map.put(nums[i], i);
            }
        }
        return new int[]{};
    }

    public static void main(String[] args) {
        TwoSumHashing obj = new TwoSumHashing();
        int[] nums = {2, 7, 11, 15};
        int target = 9;
        int[] result = obj.twoSum(nums, target);
        for (int i = 0; i < result.length; i++) {
            System.out.print(result[i] + " ");
        }
    }
}


Time Complexity: O(n)
Space Complexity: O(n)