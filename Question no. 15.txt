15. Find the k-th smallest element in a sorted matrix. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. Use a min-heap to store elements along with their coordinates.



2. Start by inserting the first element of each row into the heap.

3. 

Pop the smallest element from the heap k times:
	- 

Each time, insert the next element in the same row (if it exists).



4. The k-th popped element is your answer.


PROGRAM:

import java.util.*;

public class KthSmallestInMatrix {
    static class Node {
        int val;
        int row;
        int col;
        Node(int val, int row, int col) {
            this.val = val;
            this.row = row;
            this.col = col;
        }
    }

    public static int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Node> pq = new PriorityQueue<>(new Comparator<Node>() {
            public int compare(Node a, Node b) {
                return a.val - b.val;
            }
        });

        for(int i = 0; i < n; i++) {
            pq.add(new Node(matrix[i][0], i, 0));
        }

        int count = 0;
        while(!pq.isEmpty()) {
            Node current = pq.poll();
            count++;
            if(count == k) {
                return current.val;
            }
            if(current.col + 1 < n) {
                pq.add(new Node(matrix[current.row][current.col + 1], current.row, current.col + 1));
            }
        }

        return -1;
    }

    public static void main(String[] args) {
        int[][] matrix = {
            {1, 5, 9},
            {10, 11, 13},
            {12, 13, 15}
        };
        int k = 8;
        System.out.println(kthSmallest(matrix, k));
    }
}


Time Complexity:
O(k log n)
Space Complexity:
O(n)