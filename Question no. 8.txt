8. Find the longest palindromic substring in a given string. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. Use a 2D boolean array dp[i][j] where:
	- 

dp[i][j] = true means the substring s[i...j] is a palindrome.



2. Initialize all dp[i][i] = true (single characters are palindromes).


3. 
Check all substrings of length 2 and mark as palindrome if characters are equal.


4. 
For substrings of length 3 or more:


	- dp[i][j] = true if s[i] == s[j] and dp[i+1][j-1] == true



5. Track the start index and max length while filling the table.

PROGRAM:

public class LongestPalindromeDP {
    public static String longestPalindrome(String s) {
        int n = s.length();
        if(n == 0) {
            return "";
        }
        boolean[][] dp = new boolean[n][n];
        int start = 0;
        int maxLength = 1;
        for(int i = 0; i < n; i++) {
            dp[i][i] = true;
        }
        for(int i = 0; i < n - 1; i++) {
            if(s.charAt(i) == s.charAt(i + 1)) {
                dp[i][i + 1] = true;
                start = i;
                maxLength = 2;
            }
        }
        for(int len = 3; len <= n; len++) {
            for(int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if(s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                    dp[i][j] = true;
                    start = i;
                    maxLength = len;
                }
            }
        }
        return s.substring(start, start + maxLength);
    }

    public static void main(String[] args) {
        String input = "cbbd";
        System.out.println(longestPalindrome(input));
    }
}


Time Complexity: O(n^2)
Space Complexity: O(n^2)