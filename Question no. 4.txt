4. Check if an array can be split into two parts such that the sum of the prefix equals the sum of the suffix. Write its algorithm, program. Find its time and space complexities.
Explain with suitable example.


Algorithm:

1. Input: Array arr[] of size n.



2. Compute total sum of the array.



3. Initialize leftSum = 0.



4. Traverse the array:


Add arr[i] to leftSum.


Check if leftSum == totalSum - leftSum.


If true, return true.



5. If loop ends, return false.



Program:

public class SplitEqualPrefixSuffix {

    public static boolean canSplit(int[] arr) {
        int totalSum = 0;
        for (int value : arr) {
            totalSum += value;
        }

        int leftSum = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            leftSum += arr[i];
            int rightSum = totalSum - leftSum;
            if (leftSum == rightSum) {
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 3};
        boolean result = canSplit(arr);
        if (result) {
            System.out.println("Array can be split into equal prefix and suffix sums.");
        } else {
            System.out.println("Array cannot be split.");
        }
    }
}


Time Complexity: O(n)


Space Complexity: O(1)

