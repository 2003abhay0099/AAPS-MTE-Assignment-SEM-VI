3. Solve the problem of finding the equilibrium index in an array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.

Ans:-

Algorithm:

1. Input: An integer array arr of size n.



2. Calculate total sum of the array.



3. Initialize leftSum = 0.



4. Traverse the array:
At index i, compute rightSum = totalSum - leftSum - arr[i].


If leftSum == rightSum, return i (equilibrium index found).

Else, update leftSum += arr[i].



5. If no such index found, return -1.




Program:

public class EquilibriumIndex {

    public static int findEquilibriumIndex(int[] arr) {
        int totalSum = 0;
        for (int value : arr) {
            totalSum += value;
        }

        int leftSum = 0;
        for (int i = 0; i < arr.length; i++) {
            int rightSum = totalSum - leftSum - arr[i];
            if (leftSum == rightSum) {
                return i;
            }
            leftSum += arr[i];
        }

        return -1;
    }

    public static void main(String[] args) {
        int[] arr = { -7, 1, 5, 2, -4, 3, 0 };
        int index = findEquilibriumIndex(arr);
        if (index != -1) {
            System.out.println("Equilibrium index is: " + index);
        } else {
            System.out.println("No equilibrium index found.");
        }
    }
}


Time Complexity: O(n)


Space Complexity: O(1)


Example:

Input:
 arr = {-7, 1, 5, 2, -4, 3, 0}



Index 3:


Left sum = -7 + 1 + 5 = -1


Right sum = -4 + 3 + 0 = -1

Equilibrium index = 3

