38. Generate all permutations of a given array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


  

ALGORITHM:

1. Create a function to generate permutations by swapping elements.

2. 

At each recursion level:
        - 

If the starting index reaches the end of the array, add the current array as a new permutation.


        - Otherwise, for each element from the current index to the end:


        - Swap the current element with the start.


        - Recursively generate permutations for the next part of the array.


        - Swap back to restore the original array (backtrack).



PROGRAM:

import java.util.*;

public class PermutationGenerator {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(nums, 0, result);
        return result;
    }

    public void backtrack(int[] nums, int start, List<List<Integer>> result) {
        if (start == nums.length) {
            List<Integer> permutation = new ArrayList<>();
            for (int i = 0; i < nums.length; i++) {
                permutation.add(nums[i]);
            }
            result.add(permutation);
            return;
        }
        for (int i = start; i < nums.length; i++) {
            swap(nums, start, i);
            backtrack(nums, start + 1, result);
            swap(nums, start, i);
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public static void main(String[] args) {
        PermutationGenerator obj = new PermutationGenerator();
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = obj.permute(nums);
        System.out.println(result);
    }
}


Time Complexity: O(n * n!)
Space Complexity: O(n!)