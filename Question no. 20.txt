20. Count all numbers with unique digits for a given number of digits. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. If n == 0, return 1 (only "0" is valid).



2. Initialize result as 10 (for n = 1, digits 0–9).



3. For each number of digits from 2 to n:


          - For k digits, the count is 9 × (9 × 8 × ... × (11 - k))
	- 

First digit: 1–9 (9 options)
	- 

Remaining digits: choose from remaining digits without repetition



4. Add each computed value to result.

Return result.


PROGRAM:

public class UniqueDigitNumbers {
    public static int countNumbersWithUniqueDigits(int n) {
        if (n == 0) return 1;
        int result = 10;
        int uniqueDigits = 9;
        int availableNumber = 9;
        for (int i = 2; i <= n && availableNumber > 0; i++) {
            uniqueDigits *= availableNumber;
            result += uniqueDigits;
            availableNumber--;
        }
        return result;
    }

    public static void main(String[] args) {
        int n = 2;
        System.out.println(countNumbersWithUniqueDigits(n));
    }
}


Time Complexity: O(n)
Space Complexity: O(1) 