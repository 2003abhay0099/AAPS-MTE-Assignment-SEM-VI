14. Find the median of two sorted arrays using binary search. Write its algorithm, program. Find its time and space complexities. Explain with suitable example. 


ALGORITHM:

1. Perform binary search on array A from 0 to m.
2. For each i, calculate j = (m + n + 1) / 2 - i.
3. Check if partition is valid:
	- If A[i-1] <= B[j] and B[j-1] <= A[i], itâ€™s valid.
4. Median:
	- If total length is even: median = (max of left parts + min of right parts) / 2
	- If odd: median = max of left parts
5. If not valid, adjust binary search bounds.

PROGRAM:

public class MedianOfTwoSortedArrays {
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int m = nums1.length;
        int n = nums2.length;
        int low = 0;
        int high = m;

        while(low <= high) {
            int i = (low + high) / 2;
            int j = (m + n + 1) / 2 - i;

            int maxLeftA;
            if(i == 0) {
                maxLeftA = Integer.MIN_VALUE;
            } else {
                maxLeftA = nums1[i - 1];
            }

            int minRightA;
            if(i == m) {
                minRightA = Integer.MAX_VALUE;
            } else {
                minRightA = nums1[i];
            }

            int maxLeftB;
            if(j == 0) {
                maxLeftB = Integer.MIN_VALUE;
            } else {
                maxLeftB = nums2[j - 1];
            }

            int minRightB;
            if(j == n) {
                minRightB = Integer.MAX_VALUE;
            } else {
                minRightB = nums2[j];
            }

            if(maxLeftA <= minRightB && maxLeftB <= minRightA) {
                if((m + n) % 2 == 0) {
                    return (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2.0;
                } else {
                    return Math.max(maxLeftA, maxLeftB);
                }
            } else if(maxLeftA > minRightB) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }

        return 0.0;
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3};
        int[] nums2 = {2};
        System.out.println(findMedianSortedArrays(nums1, nums2));
    }
}


Time Complexity: O(log(min(m, n)))
Space Complexity: O(1)
