2. Write a program to find the sum of elements in a given range [L, R] using a prefix sum array. Write its algorithm, program. Find its time and space complexities. Explain with
suitable example.

Ans:- 

ALGORITHM:

1. Input: Array arr[] of size n, and a range [L, R].



2. Preprocessing:

	
Create a prefix sum array prefix[] such that prefix[i] stores the sum of all elements from index 0 to i in arr.

Prefix Sum 

3. Construction:

	
prefix[0] = arr[0]


For i = 1 to n-1: prefix[i] = prefix[i - 1] + arr[i]



4. Answer Range Sum Query:


	If L == 0, return prefix[R]


Else, return prefix[R] - prefix[L - 1]


PROGRAM:

public class RangeSumPrefix {

    public static int[] buildPrefixSum(int[] arr) {
        int n = arr.length;
        int[] prefix = new int[n];
        prefix[0] = arr[0];
      for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }
        return prefix;
    }

    public static int rangeSum(int[] prefix, int L, int R) {
        if (L == 0) {
            return prefix[R];
        } else {
            return prefix[R] - prefix[L - 1];
        }
    }

    public static void main(String[] args) {
        int[] arr = {2, 4, 1, 3, 5};
        int L = 1;
        int R = 3;

        int[] prefix = buildPrefixSum(arr);
        int result = rangeSum(prefix, L, R);
        System.out.println("Sum of elements from index " + L + " to " + R + " is: " + result);
    }
}

// Output: Sum of elements from index 1 to 3 is: 8

Time complexity:- O(n)
Space complexit:- O(n)