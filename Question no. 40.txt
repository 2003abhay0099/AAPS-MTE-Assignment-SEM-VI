40. Solve the problem of finding the element with maximum frequency in an array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

     - Create a HashMap to store the frequency (count) of each element.


     - Traverse the array and update the frequency for each element.


     - Traverse the HashMap to find the element with the highest frequency.


     - Return that element.



PROGRAM:

import java.util.*;

public class MaximumFrequencyElement {
    public int findMaxFrequencyElement(int[] nums) {
        HashMap<Integer, Integer> frequencyMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (frequencyMap.containsKey(nums[i])) {
                frequencyMap.put(nums[i], frequencyMap.get(nums[i]) + 1);
            } else {
                frequencyMap.put(nums[i], 1);
            }
        }
        int maxCount = 0;
        int maxElement = nums[0];
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                maxElement = entry.getKey();
            }
        }
        return maxElement;
    }

    public static void main(String[] args) {
        MaximumFrequencyElement obj = new MaximumFrequencyElement();
        int[] nums = {1, 3, 2, 1, 4, 1, 3};
        int result = obj.findMaxFrequencyElement(nums);
        System.out.println(result);
    }
}


Time Complexity: O(n)
Space Complexity: O(n)