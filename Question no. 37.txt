37. Find all unique combinations of numbers that sum to a target. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. Sort the array to help handle duplicates easily.



2. Create a function that tries all possibilities:


     - If the current sum equals the target, add the current combination to the answer list.


     - If the current sum exceeds the target, return (prune the recursion).
     - 

Otherwise, for each number starting from the current index:
     - 

Add the number to the current combination.

	
     - Recursively call the function with updated sum and current index (because repetition allowed).


     - After returning, remove the last number added (backtrack).




PROGRAM:

import java.util.*;

public class CombinationSum {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] candidates, int target, int start, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        if (target < 0) {
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            current.add(candidates[i]);
            backtrack(candidates, target - candidates[i], i, current, result);
            current.remove(current.size() - 1);
        }
    }

    public static void main(String[] args) {
        CombinationSum obj = new CombinationSum();
        int[] candidates = {2, 3, 6, 7};
        int target = 7;
        List<List<Integer>> result = obj.combinationSum(candidates, target);
        System.out.println(result);
    }
}


Time Complexity: O(2^t)
Space Complexity: O(t)