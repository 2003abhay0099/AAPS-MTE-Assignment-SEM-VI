48. Solve the problem of finding the next permutation of a given array. Write its algorithm, program. Find its time and space complexities. Explain with suitable example.


ALGORITHM:

1. Find the largest index i such that nums[i] < nums[i + 1]. This is the point where the order is no longer strictly decreasing from right to left.



2. If no such i exists, the array is the last permutation. In that case, reverse the array to get the smallest permutation.



3. Find the largest index j such that nums[i] < nums[j].



4. Swap the values of nums[i] and nums[j].



5. Reverse the subarray starting at index i + 1 to get the next smallest lexicographical order.



PROGRAM:

import java.util.*;

public class NextPermutation {
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 2;
        
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        if (i >= 0) {
            int j = n - 1;
            while (nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1, n - 1);
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i++, j--);
        }
    }

    public static void main(String[] args) {
        NextPermutation obj = new NextPermutation();
        int[] nums = {1, 2, 3};
        obj.nextPermutation(nums);
        System.out.println(Arrays.toString(nums));
    }
}


Time Complexity: O(n)
Space Complexity: O(1)